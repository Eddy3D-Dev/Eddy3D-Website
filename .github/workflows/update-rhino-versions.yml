name: Update Rhino versions from NuGet (weekly)

on:
  schedule:
    # Every Monday at 09:10 UTC
    - cron: "10 9 * * 1"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    concurrency:
      group: update-rhino-from-nuget
      cancel-in-progress: false

    # If WEBSITE_TOKEN exists, we'll use it; otherwise fall back to GITHUB_TOKEN.
    env:
      RHINO_MAJOR: "8"
      RHINO_LOCALE: "en-us"
      MD_PATH: "docs/rhino-versions.md"
      PUSH_TOKEN: ${{ secrets.WEBSITE_TOKEN || secrets.GITHUB_TOKEN || secrets.DEPLOY }}

    steps:
      - name: Checkout dev branch (no persisted creds)
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Reconstruct URL from NuGet & update markdown (prints outputs)
        id: nuget
        run: |
          python - <<'PY'
          import datetime as dt
          import os, re, sys
          from urllib.parse import urlparse
          import requests

          USER_AGENT = "nuget-rhino-actions/1.1"
          REG_INDEX = "https://api.nuget.org/v3/registration5-semver1/rhinocommon/index.json"
          STABLE_SUFFIX_RE = re.compile(r'^[0-9]+(\.[0-9]+){3}$')  # e.g., 8.24.25281.15001
          BULLET_RE = re.compile(r'^\s{4}- \[.*\]\(.*\)\s*$')

          MAJOR = int(os.getenv("RHINO_MAJOR", "8"))
          LOCALE = os.getenv("RHINO_LOCALE", "en-us")
          MD_PATH = os.getenv("MD_PATH", "docs/rhino-versions.md")

          def fetch_registration_index():
            r = requests.get(REG_INDEX, timeout=30, headers={"User-Agent": USER_AGENT})
            r.raise_for_status()
            return r.json()

          def versions_from_registration(reg_json):
            versions = []
            for page in reg_json.get("items", []):
              items = page.get("items")
              if items is None:
                page_url = page.get("@id")
                pr = requests.get(page_url, timeout=30, headers={"User-Agent": USER_AGENT})
                pr.raise_for_status()
                items = pr.json().get("items", [])
              for leaf in items:
                ver = leaf.get("catalogEntry", {}).get("version")
                if ver:
                  versions.append(ver)
            return versions

          def parse_version_tuple(ver: str):
            parts = ver.split(".")
            return tuple(int(p) for p in parts[:4])

          def pick_latest_stable_major(all_versions, major: int):
            cands = [v for v in all_versions if STABLE_SUFFIX_RE.match(v)]
            cands = [v for v in cands if v.split(".")[0] == str(major)]
            if not cands:
              return None
            cands.sort(key=parse_version_tuple, reverse=True)
            return cands[0]

          def decode_version_date(ver: str) -> dt.date:
            yyddd = ver.split(".")[2]
            yy = int(yyddd[:-3])
            ddd = int(yyddd[-3:])
            year = 2000 + yy
            return dt.date(year, 1, 1) + dt.timedelta(days=ddd - 1)

          def build_dujour_url(ver: str, date_obj: dt.date, locale="en-us") -> str:
            ymd = date_obj.strftime("%Y%m%d")
            filename = f"rhino_{locale}_{ver}.exe"
            return f"https://files.mcneel.com/dujour/exe/{ymd}/{filename}"

          def head_exists(url: str) -> bool:
            try:
              r = requests.head(url, timeout=20, allow_redirects=True, headers={"User-Agent": USER_AGENT})
              return r.status_code == 200
            except requests.RequestException:
              return False

          def ensure_newline(s: str) -> str:
            return s if s.endswith("\n") else s + "\n"

          def insert_bullet(md_path: str, filename: str, url: str) -> bool:
            bullet = f"    - [{filename}]({url})"
            os.makedirs(os.path.dirname(md_path), exist_ok=True)

            if not os.path.exists(md_path):
              with open(md_path, "w", encoding="utf-8") as f:
                f.write(bullet + "\n")
              print(f"[added:newfile] {bullet}")
              return True

            with open(md_path, "r", encoding="utf-8") as f:
              content = f.read()

            if filename in content:
              print("[ok] No update needed (already present).")
              return False

            lines = content.splitlines()
            insert_at = next((i for i, ln in enumerate(lines) if BULLET_RE.match(ln)), None)

            if insert_at is None:
              if lines and lines[-1] != "":
                lines.append("")
              lines.append(bullet)
            else:
              lines.insert(insert_at, bullet)

            new_content = "\n".join(lines)
            new_content = ensure_newline(new_content)

            with open(md_path, "w", encoding="utf-8") as f:
              f.write(new_content)

            print(f"[added] {bullet}")
            return True

          # ---- Run ----
          version = date_iso = filename = url = ""
          changed = False
          try:
            reg = fetch_registration_index()
            versions = versions_from_registration(reg)
            latest = pick_latest_stable_major(versions, MAJOR)
            if latest:
              version = latest
              date_obj = decode_version_date(latest)
              date_iso = date_obj.isoformat()
              url = build_dujour_url(latest, date_obj, locale=LOCALE)
              from urllib.parse import urlparse
              filename = os.path.basename(urlparse(url).path)

              live = head_exists(url)
              print(f"Version: {version}")
              print(f"Build date: {date_iso}")
              print(f"Filename: {filename}")
              print(f"URL: {url}")
              print(f"HEAD 200: {live}")

              if live:
                changed = insert_bullet(MD_PATH, filename, url)
              else:
                print("Constructed URL not live yet; skipping file update.")
            else:
              print(f"No stable Rhino {MAJOR} version found in NuGet.")
          except Exception as e:
            print(f"::warning::Failed: {e}")

          # Expose step outputs
          out = os.environ.get("GITHUB_OUTPUT")
          if out:
            with open(out, "a", encoding="utf-8") as fh:
              if version:  fh.write(f"version={version}\n")
              if date_iso: fh.write(f"date={date_iso}\n")
              if filename: fh.write(f"filename={filename}\n")
              if url:      fh.write(f"url={url}\n")
              fh.write(f"changed={'true' if changed else 'false'}\n")
          PY

      - name: Print results (console + Summary)
        run: |
          echo "Version:  ${{ steps.nuget.outputs.version }}"
          echo "Date:     ${{ steps.nuget.outputs.date }}"
          echo "Filename: ${{ steps.nuget.outputs.filename }}"
          echo "URL:      ${{ steps.nuget.outputs.url }}"
          echo "Changed:  ${{ steps.nuget.outputs.changed }}"
          {
            echo "### Rhino update";
            echo "";
            echo "- **Version**:  ${{ steps.nuget.outputs.version }}";
            echo "- **Date**:     ${{ steps.nuget.outputs.date }}";
            echo "- **Filename**: ${{ steps.nuget.outputs.filename }}";
            echo "- **URL**:      ${{ steps.nuget.outputs.url }}";
            echo "- **Changed**:  ${{ steps.nuget.outputs.changed }}";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Configure git (use PAT or GITHUB_TOKEN)
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Repoint origin with token explicitly (avoids relying on checkout's persisted creds)
          git remote set-url origin https://x-access-token:${PUSH_TOKEN}@github.com/${{ github.repository }}.git

      - name: Commit & push if changed
        run: |
          set -e
          if ! git diff --quiet; then
            git add "$MD_PATH"
            git commit -m "chore: update Rhino ${RHINO_MAJOR} from NuGet (auto)"
            git pull --rebase origin dev || true
            git push origin HEAD:dev
          else
            echo "No changes."
          fi
